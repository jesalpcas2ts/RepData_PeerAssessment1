install.packages("KernSmooth")
install.packages("KernSmooth")
source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(KernSmooth)
add2 <- function(x, y){
x + y
}
add2(3,5)
above <- function(x, n){
use <- x > n
x[use]
}
x <- 8:25
above(x , 13)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x , 13)
above(x)
airquality
colmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
colmean(airquality)
colmean(airquality,false)
colmean(airquality,FALSE)
quit()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1,1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
library(datasets)
data(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
ma= matrix(1:5,1:5)
ma
ma= matrix(1:25,1:5)
m
ma
ma= matrix(1:25,1:5,1:5)
ma
ma <- 1:25
ma
ma <- matrix(1:25, nrow=5,ncol=5)
ma
solve(ma)
?solve
ma2 <- 1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1
ma2 <- c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)
ma
ma2
dim(ma2) <- c(3,3)
dim(ma2) <- c(4,4)
ma2
solve(ma2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(ma2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ma[1,]
ma[,1]
cachemean(ma[,1])
debug(cachemean)
cachemean(ma[,1])
makevector(ma2)
makeVector(ma2)
cachemean(ma[,1])
makeVector(ma2[,1])
a<- makeVector(ma2[,1])
cachemean(a)
ma <- makeCacheMatrix(ma2)
cacheSolve(ma)
cacheSolve(ma)
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
Try rep(c(0, 1, 2), each = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Jesus")
my_name <- c(my_char, "Jesus")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
library(swirl)
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill, Gina, Kelly, and Sean)
""
"
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data,cnames)
colnames(cnames,my_data)
colnames(my_data,cnames)
?colnames
colnames(my_data) <- cnames
my_data
quit()
quit
quit()
install.packages("ggplot2")
install.packages("lattice")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies, aes(votes, rating))
?ggplot
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode <- readlines(con)
htmlcode <- readLines(con)
htmlcode[10]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
x <- read.fwf(
file=url("hhttps://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
?sum()
?sum
sum(x$v4)
head(x)
sum(x[.4])
x$v4
x.v4
x[4]
sum(x[4])
head(x)
x <- fread.fwf(
file=url("hhttps://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- fread(
file=url("hhttps://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
fread
?fread
library(data.table)
?fread
y<- fread(file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",destfile="temp.txt")
y<-fread("temp.txt")
y<-fread("temp.txt",skip=4)
?read
?read.txt
??read
y<-read.table("temp.txt",skip=4)
swd()
install.packages("sqldf")
library(RSQLite)
install.packages("DBI")
install.packages("DBI")
library(RSQLite)
library(DBI)
library(RSQLite)
library(sqldf)
library(sqldf)
install.packages("RMySQL")
?version
version()
Version()
R.Version()
install.packages("httr")
library(httr)
quit()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "56b637a5baffac62cad9")
myapp <- oauth_app("github", "
4b5b5c8170ef9598a297b5268c56fb287a79d61c
myapp <- oauth_app("github", "4b5b5c8170ef9598a297b5268c56fb287a79d61c")
quit()
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
Sys.setenv(GITHUB_CONSUMER_SECRET="4b5b5c8170ef9598a297b5268c56fb287a79d61c")
Sys.getenv(GITHUB_CONSUMER_SECRET)
Sys.getenv()
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", "55295220f4735c301410")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
myapp <- oauth_app("github", "55295220f4735c301410")
Sys.setenv(GITHUB_CONSUMER_SECRET="4b5b5c8170ef9598a297b5268c56fb287a79d61c")
myapp <- oauth_app("github", "55295220f4735c301410")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
Sys.setenv(GITHUB_CONSUMER_SECRET="4b5b5c8170ef9598a297b5268c56fb287a79d61c")
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
Sys.setenv(GITHUB_CONSUMER_SECRET="09d0464cb08f35996024a2b29abb39b518154e99")
myapp <- oauth_app("github", "bdf8efa5236242f7a0b6", secret="09d0464cb08f35996024a2b29abb39b518154e99")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
json2 = jsonlite::fromJSON(toJSON(req))
json2 = jsonlite::fromJSON(toJSON(req))
?asJASON
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(req))
req
json <- toJSON(fromJSON(req))
json <- toJSON(req)
json1<-content(req)
json1<-Content(req)
?content
??content
stop_for_status(req)
content(req)
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
install.packages("jsonlite")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
??content
?content
save.image("~/quiz2.RData")
save.image("~/quiz2.RData")
install.packages("httr")
library(httr)
install.packages("httpuv")
library(httpuv)
install.packages("jsonlite")
library(jsonlite)
install.packages("httr")
install.packages("httr")
content(req)
json1 <- content(req)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2
json2[1.]
json2[.1]
json2[1,1:4]
json2[.2]
json2[2.]
json2[1,5]
json2[1,1:5]
json2[5,]
json2$created_at[5]
json2$name[5]
quit()
setwd("C:/Users/Jesus/RepData_PeerAssessment1")
